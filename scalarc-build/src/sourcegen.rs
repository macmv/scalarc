//! rust-analyzer relies heavily on source code generation.
//!
//! Things like feature documentation or assist tests are implemented by
//! processing rust-analyzer's own source code and generating the appropriate
//! output. See `sourcegen_` tests in various crates.
//!
//! This crate contains utilities to make this kind of source-gen easy.

use std::{
  fs,
  path::{Path, PathBuf},
};

use xshell::{cmd, Shell};

fn ensure_rustfmt(sh: &Shell) {
  let version = cmd!(sh, "rustup run nightly rustfmt --version").read().unwrap_or_default();
  if !version.contains("nightly") {
    panic!(
      "Failed to run rustfmt from toolchain 'nightly'.\
       Please run `rustup component add rustfmt --toolchain nightly` to install it.",
    );
  }
}

pub fn reformat(text: String) -> String {
  let sh = Shell::new().unwrap();
  ensure_rustfmt(&sh);
  let rustfmt_toml = project_root().join("rustfmt.toml");
  let mut stdout =
    cmd!(sh, "rustup run nightly rustfmt --config-path {rustfmt_toml}").stdin(text).read().unwrap();
  if !stdout.ends_with('\n') {
    stdout.push('\n');
  }
  stdout
}

pub fn add_preamble(generator: &'static str, mut text: String) -> String {
  let preamble = format!("//! Generated by `{generator}`, do not edit by hand.\n\n");
  text.insert_str(0, &preamble);
  text
}

/// Checks that the `file` has the specified `contents`. If that is not the
/// case, updates the file and then fails the test.
pub fn ensure_file_contents(file: &Path, contents: &str) {
  if let Ok(old_contents) = fs::read_to_string(file) {
    if normalize_newlines(&old_contents) == normalize_newlines(contents) {
      // File is already up to date.
      return;
    }
  }

  if let Some(parent) = file.parent() {
    let _ = fs::create_dir_all(parent);
  }
  fs::write(file, contents).unwrap();
}

fn normalize_newlines(s: &str) -> String { s.replace("\r\n", "\n") }

pub fn project_root() -> PathBuf {
  let dir = env!("CARGO_MANIFEST_DIR");
  let res = PathBuf::from(dir).parent().unwrap().to_owned();
  assert!(res.join("rustfmt.toml").exists());
  res
}
