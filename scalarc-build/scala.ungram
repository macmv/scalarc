// Scala Un-Grammar.
//
// This grammar specifies the structure of Scala's concrete syntax tree.
// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).
// Tokens are processed -- contextual keywords are recognised, compound operators glued.
//
// Legend:
//
//   //          -- comment
//   Name =      -- non-terminal definition
//   'ident'     -- token (terminal)
//   A B         -- sequence
//   A | B       -- alternation
//   A*          -- zero or more repetition
//   A?          -- zero or one repetition
//   (A)         -- same as A
//   label:A     -- suggested name for field of AST node


// TODO: Need to lex all of this
LitExpr = ('-')? 'int_lit'
        | ('-')? 'float_lit'
        | 'true' | 'false'
        | 'character_lit'
        | 'string_lit'
        | 'interpolated_string'
        | 'symbol_lit'
        | 'null'

LitPattern = ('-')? 'int_lit'
           | ('-')? 'float_lit'
           | 'true' | 'false'
           | 'character_lit'
           | 'string_lit'
           | 'interpolated_string'
           | 'symbol_lit'
           | 'null'

// Special token for strings.
any = 'any'

CharacterLit = '\'' any '\''
DoubleQuotedString = '"' any* '"'
TrippleQuotedString = '"""' any* '"""'

id = 'ident'
nl = 'nl'

varid = id
boundvarid = id

QualId = id ('.' id)*
ids = id (',' id)*

Path = id ('.' id)*
StableId = Path

// Path = StableId | (id '.')? 'this'
// StableId = id
//          | Path '.' id
//          | (id '.')? 'super' (ClassQualifier)? '.' id
// ClassQualifier = '[' id ']'

// This is the orignal grammar, which is insane.
// Type              = FunctionArgTypes '=>' Type | InfixType (ExistentialClause)?
// FunctionArgTypes  = InfixType | '(' ( ParamType (',' ParamType)* )? ')'
// // No idea what 'forSome' is, going to comment out for now.
// // ExistentialClause = 'forSome' '{' ExistentialDec (';' ExistentialDec)? '}'
// ExistentialClause = 'for' '{' ExistentialDec (';' ExistentialDec)? '}'
// ExistentialDec    = TypeDec | ValDef
// InfixType         = CompoundType (id (nl)? CompoundType)*
// CompoundType      = AnnotType ('with' AnnotType)* (Refinement)? | Refinement
// AnnotType         = SimpleType (Annotation)*
// SimpleType        = SimpleType TypeArgs
//                   | SimpleType '#' id
//                   | StableId
//                   | Path '.' 'type'
//                   | '(' Types ')'

Type = LambdaType
     | GenericType
     | TupleType
     | PathType
     | SimpleType

LambdaType  = '(' ')' '=>' Type // TODO
GenericType = Type TypeParams
PathType    = Type '.' id
TupleType   = '(' (Type (',' Type)*)? ')'
SimpleType  = id

TypeParams = '[' (Type (',' Type)*) ']'
Types      = (Type (',' Type)*)
Refinement = nl? '{' Def (';' Def)* '}'
TypePat    = Type

Ascription = AscriptionType | AscriptionAnnotation | AscriptionSpread

AscriptionType       = ':' Type
AscriptionAnnotation = ':' Annotation (Annotation)*
AscriptionSpread     = ':' '_' '*'

Expr = IfExpr
     | WhileExpr
     | TryExpr
     | DoWhileExpr
     | ForExpr
     | ThrowExpr
     | ReturnExpr
     | LambdaExpr
     | AssignDotExpr
     | PostfixExpr
     | InfixExpr
     | PrefixExpr
     | PostfixExprAscription
     | MatchExpr
     | NewExpr
     | BlockExpr
     | PostfixUnderscoreExpr
     | LitExpr
     | IdentExpr
     | CharacterLit
     | DoubleQuotedString
     | TrippleQuotedString
     | Path
     | UnderscoreExpr
     | TupleExpr
     | FieldExpr
     | CallExpr

IfExpr      = 'if' '(' Expr ')' Expr ('else' Expr)?
WhileExpr   = 'while' '(' Expr ')' (nl)* Expr
TryExpr     = 'try' Expr ('catch' Expr)? ('finally' Expr)?
DoWhileExpr = 'do' Expr (';')? 'while' '(' Expr ')'
ForExpr     = 'for' ('(' Enumerators ')' | '{' Enumerators '}') (nl)* ('yield')? Expr
ThrowExpr   = 'throw' Expr
ReturnExpr  = 'return' Expr?

LambdaExpr = ('todo') '=>' Expr

AssignDotExpr = SimpleExpr '=' Expr

PostfixExprAscription = PostfixExpr Ascription
MatchExpr             = Expr 'match' '{' CaseItem (CaseItem)* '}'

PostfixExpr    = Expr id
InfixExpr      = lhs:Expr id rhs:Expr
PrefixExpr     = id Expr // id can only be '-' | '+' | '~' | '!'
IdentExpr      = id

SimpleExpr = NewExpr
           | BlockExpr
           | PostfixUnderscoreExpr
           | Path
           | UnderscoreExpr
           | TupleExpr
           | FieldExpr
           | CallExpr
           | LitExpr
           | DoubleQuotedString
           | TrippleQuotedString

NewExpr = 'new' id? TypeParams? ParenArguments? BlockExpr?
PostfixUnderscoreExpr = Expr '_'

UnderscoreExpr = '_'
TupleExpr      = '(' (Expr (',' Expr)*)? ')'
FieldExpr      = Expr '.' id
TypedExpr      = Expr TypeParams
CallExpr       = Expr Arguments

Arguments       = ParenArguments | SpreadArguments | BlockExpr
ParenArguments  = '(' (Expr (',' Expr)*)? ')'
SpreadArguments = '(' (Expr (',' Expr)*)? PostfixExpr ':' '_' '*' ')'

BlockExpr      = '{' (Item (';' Item)*) '}'
Block          = Item (';' Item)*
ResultExpr     = Expr

Enumerators    = Generator (';' Generator)*
Generator      = ('case')? Pattern '<-' Expr ((';')? Guard | ';' Pattern '=' Expr)*

// TypeParamClause    = '[' VariantTypeParam (',' VariantTypeParam)* ']'
// FunTypeParamClause = '[' TypeParam (',' TypeParam)* ']'
// VariantTypeParam   = (Annotation)* ('+' | '-')? TypeParam
// TypeParam          = (id | '_') (TypeParamClause)? ('>:' Type)? ('<:' Type)?
//                      ('<%' Type)* (':' Type)*
// FunParams         = ParamClause* ((nl)? '(' 'implicit' FunParam (',' FunParam)* ')')?
// ParamClause       = nl? '(' (FunParam (',' FunParam)*)? ')'
// FunParam          = Annotation* id (':' ParamType)? ('=' Expr)?
// ParamType         = Type
//                   | '=>' Type
//                   | Type '*'

FunParams = '(' (FunParam (',' FunParam)*) ')'
FunParam  = Annotation* id (':' Type)? ('=' Expr)?

ClassFunParams = 'todo'

// ClassFunParams = (ClassParamClause)* ((nl)? '(' 'implicit' ClassParams ')')?
// ClassParamClause  = (nl)? '(' (ClassParams)? ')'
// ClassParams       = ClassParam (',' ClassParam)*
// ClassParam        = (Annotation)* (Modifier)* ('val' | 'var')?
//                       id ':' ParamType ('=' Expr)?
// Bindings          = '(' Binding (',' Binding)* ')'
// Binding           = (id | '_') (':' Type)?

Modifier      = LocalModifier
              | AccessModifier
              | 'override'
LocalModifier = 'abstract'
                    |  'final'
                    |  'sealed'
                    |  'implicit'
                    |  'lazy'
AccessModifier    =  ('private' | 'protected') (AccessQualifier)?
AccessQualifier   =  '[' (id | 'this') ']'

Annotation        =  '@' Type Arguments*
ConstrAnnotation  =  '@' Type Arguments

ItemBody = nl? '{' SelfType? (Item (';' Item)*) '}'
SelfType = id (':' Type)? '=>'

Package = 'package' (id ('.' id)*)

Import     = 'import' (ImportExpr (',' ImportExpr)*)
ImportExpr = Path | ImportSelectors

ImportSelectors      = Path '.' '{' (ImportSelector (',' ImportSelector)*) '}'
ImportSelector       = ImportSelectorId | ImportSelectorRename | ImportSelectorAll
ImportSelectorId     = id
ImportSelectorRename = id '=>' id
ImportSelectorAll    = '_'

Def = ValDef
    | VarDef
    | FunDef
    | TypeDef

ValDef  = 'val' id (':' Type)? '=' Expr
VarDef  = 'var' id (':' Type)? '=' Expr
FunDef  = 'def' FunSig '=' Expr
FunSig  = id TypeParams? FunParams* (':' Type)?
TypeDec = 'type' id Type

// Items

Item = ExprItem
  | LazyItem
  | ImplicitItem
  | AnnotatedItem
  | CaseItem
  | ValDef
  | VarDef
  | FunDef
  | TypeDef
  | ClassDef
  | ObjectDef
  | TraitDef
  | Package
  | Import

// new-typed expr so we can have nested enums.
ExprItem = Expr

LazyItem = 'lazy' Item
ImplicitItem = 'implicit' Item
AnnotatedItem = Annotation* Item

CaseItem = 'case' Pattern Guard? '=>' Block
Guard    = 'if' Expr

Pattern = UnionPattern
  | TypePattern
  | AtPattern
  | ArgPattern
  | LitPattern
  | IdentPattern

PatternArgs = '(' (Pattern (',' Pattern)*) ')'

UnionPattern = Pattern ('|' Pattern)*
TypePattern = id ':' Type
AtPattern    = id '@' Pattern
ArgPattern   = id PatternArgs
IdentPattern = id

// TODO: Need to merge this with ValDef and VarDef
// PatDef      = ('val' | 'var') PatternAt (',' PatternAt)* (':' Type)? '=' Expr
// FunEqDef    = 'def' FunSig '=' Expr
// FunBlockDef = 'def' FunSig (nl)? '{' Block '}'
// FunThisDef  = 'this' FunParams ('=' ConstrExpr | (nl)? ConstrBlock)

TypeDef     = 'type' id TypeParams? '=' Type

// TODO:`FunParams` should be `ClassFunParams`
ClassDef     = 'case'? 'class' id TypeParams? ConstrAnnotation* AccessModifier? FunParams ClassExtends body:ItemBody
TraitDef     = 'trait' id TypeParams? TraitTemplateOpt
ObjectDef    = 'case'? 'object' id body:ItemBody
ClassExtends = 'extends' ClassTemplate // TODO

TraitTemplateOpt = 'extends' TraitTemplate | ('extends'? ItemBody)?
TraitTemplate    = EarlyDefs? TraitParents ItemBody?
TraitParents     = Type ('with' Type)*

ClassTemplate    = EarlyDefs? ClassParents ItemBody?
ClassParents     = Constr ('with' Type)*
Constr           = Type Arguments*

EarlyDefs        = '{' (EarlyDef (';' EarlyDef)*)? '}' 'with'
EarlyDef         = Annotation* Modifier* Def

ConstrExpr     = SelfInvocation | ConstrBlock
ConstrBlock    = '{' SelfInvocation (';' Item)* '}'
SelfInvocation = 'this' Arguments*

// TopStatSeq     = TopStat (';' TopStat)*
// TopStat        = (Annotation (nl)?)* (Modifier)* TmplDef
//                | Import
//                | Packaging
//                | PackageObject
// Packaging      =  'package' QualId (nl)? '{' TopStatSeq '}'
// PackageObject  =  'package' 'object' ObjectDef
//
// SourceFile = ('package' QualId ';')* TopStatSeq

SourceFile = Item*
